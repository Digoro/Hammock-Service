{"filter":false,"title":"stepcarousel.js","tooltip":"/app/assets/javascripts/stepcarousel.js","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":409,"column":0},"action":"insert","lines":["//** Step Carousel Viewer- (c) Dynamic Drive DHTML code library: http://www.dynamicdrive.com","//** Script Download/ http://www.dynamicdrive.com/dynamicindex4/stepcarousel.htm","//** Usage Terms: http://www.dynamicdrive.com/notice.htm","//** Current version 1.91 (Aug 15th, 11'): See http://www.dynamicdrive.com/dynamicindex4/stepcarouselchangelog.txt for details","","","jQuery.noConflict()","","var stepcarousel={","\tajaxloadingmsg: '<div style=\"margin: 1em; font-weight: bold\"><img src=\"ajaxloadr.gif\" style=\"vertical-align: middle\" /> Fetching Content. Please wait...</div>', //customize HTML to show while fetching Ajax content","\tdefaultbuttonsfade: 0.4, //Fade degree for disabled nav buttons (0=completely transparent, 1=completely opaque)","\tswipethreshold: [50, 300], // distance traveled within x milliseconds before it is considered a swipe [pixels, milliseconds]","\tconfigholder: {},","","\tgetCSSValue:function(val){ //Returns either 0 (if val contains 'auto') or val as an integer","\t\treturn (val==\"auto\")? 0 : parseInt(val)","\t},","","\tgetremotepanels:function($, config){ //function to fetch external page containing the panel DIVs","\t\tconfig.$belt.html(this.ajaxloadingmsg)","\t\t$.ajax({","\t\t\turl: config.contenttype[1], //path to external content","\t\t\tasync: true,","\t\t\tdataType: 'html',","\t\t\terror:function(ajaxrequest){","\t\t\t\tconfig.$belt.html('Error fetching content.<br />Server Response: '+ajaxrequest.responseText)","\t\t\t},","\t\t\tsuccess:function(content){","\t\t\t\tconfig.$belt.html(content)","\t\t\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass)","\t\t\t\tstepcarousel.alignpanels($, config)","\t\t\t}","\t\t})","\t},","","\tgetoffset:function(what, offsettype){","\t\treturn (what.offsetParent)? what[offsettype]+this.getoffset(what.offsetParent, offsettype) : what[offsettype]","\t},","","\tgetCookie:function(Name){ ","\t\tvar re=new RegExp(Name+\"=[^;]+\", \"i\"); //construct RE to search for target name/value pair","\t\tif (document.cookie.match(re)) //if cookie found","\t\t\treturn document.cookie.match(re)[0].split(\"=\")[1] //return its value","\t\treturn null","\t},","","\tsetCookie:function(name, value){","\t\tdocument.cookie = name+\"=\"+value","\t},","","\tfadebuttons:function(config, currentpanel){","\t\tconfig.$leftnavbutton.fadeTo('fast', currentpanel==0? this.defaultbuttonsfade : 1)","\t\tconfig.$rightnavbutton.fadeTo('fast', currentpanel==config.lastvisiblepanel? this.defaultbuttonsfade : 1)","\t\tif (currentpanel==config.lastvisiblepanel){","\t\t\tstepcarousel.stopautostep(config)","\t\t}","","\t},","","\taddnavbuttons:function($, config, currentpanel){","\t\tconfig.$leftnavbutton=$('<img src=\"'+config.defaultbuttons.leftnav[0]+'\" class=\"' + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Back '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$rightnavbutton=$('<img src=\"'+config.defaultbuttons.rightnav[0]+'\" class=\"'  + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Forward '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$leftnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, -config.defaultbuttons.moveby)","\t\t})","\t\tconfig.$rightnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, config.defaultbuttons.moveby)","\t\t})","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, currentpanel)","\t\t}","\t\treturn config.$leftnavbutton.add(config.$rightnavbutton)","\t},","","\talignpanels:function($, config){","\t\tvar paneloffset=0","\t\tconfig.paneloffsets=[paneloffset] //array to store upper left offset of each panel (1st element=0)","\t\tconfig.panelwidths=[] //array to store widths of each panel","\t\tconfig.$panels.each(function(index){ //loop through panels","\t\t\tvar $currentpanel=$(this)","\t\t\t$currentpanel.css({float: 'none', position: 'absolute', left: paneloffset+'px'}) //position panel","\t\t\t$currentpanel.bind('click', function(e){ //bind onpanelclick() to onclick event","\t\t\t\tif (mousedist == 0) // if this was an actual click, instead of swipe","\t\t\t\treturn config.onpanelclick(e.target)","\t\t\t})","\t\t\tpaneloffset+=stepcarousel.getCSSValue($currentpanel.css('marginRight')) + parseInt($currentpanel.get(0).offsetWidth || $currentpanel.css('width')) //calculate next panel offset","\t\t\tconfig.paneloffsets.push(paneloffset) //remember this offset","\t\t\tconfig.panelwidths.push(paneloffset-config.paneloffsets[config.paneloffsets.length-2]) //remember panel width","\t\t})","\t\tconfig.paneloffsets.pop() //delete last offset (redundant)","\t\tvar addpanelwidths=0","\t\tvar lastpanelindex=config.$panels.length-1","\t\tconfig.lastvisiblepanel=lastpanelindex","\t\tfor (var i=config.$panels.length-1; i>=0; i--){","\t\t\taddpanelwidths+=(i==lastpanelindex? config.panelwidths[lastpanelindex] : config.paneloffsets[i+1]-config.paneloffsets[i])","\t\t\tif (config.gallerywidth>addpanelwidths){","\t\t\t\tconfig.lastvisiblepanel=i //calculate index of panel that when in 1st position reveals the very last panel all at once based on gallery width","\t\t\t}","\t\t}","\t\tconfig.$belt.css({width: paneloffset+'px'}) //Set Belt DIV to total panels' widths","\t\tconfig.currentpanel=(config.panelbehavior.persist)? parseInt(this.getCookie(config.galleryid+\"persist\")) : 0 //determine 1st panel to show by default","\t\tconfig.currentpanel=(typeof config.currentpanel==\"number\" && config.currentpanel<config.$panels.length)? config.currentpanel : 0","\t\tvar endpoint=config.paneloffsets[config.currentpanel]+(config.currentpanel==0? 0 : config.beltoffset)","\t\tconfig.$belt.css({left: -endpoint+'px'})","\t\tif (config.defaultbuttons.enable==true){ //if enable default back/forth nav buttons","\t\t\tvar $navbuttons=this.addnavbuttons($, config, config.currentpanel)","\t\t\t$(window).bind(\"load resize\", function(){ //refresh position of nav buttons when page loads/resizes, in case offsets weren't available document.oncontentload","\t\t\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\t\t\tconfig.$leftnavbutton.css({left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px'})","\t\t\t\tconfig.$rightnavbutton.css({left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px'})","\t\t\t})","\t\t}","\t\tif (config.autostep && config.autostep.enable){ //enable auto stepping of Carousel?\t\t","\t\t\tvar $carouselparts=config.$gallery.add(typeof $navbuttons!=\"undefined\"? $navbuttons : null)","\t\t\t$carouselparts.bind('click', function(){","\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t})","\t\t\t$carouselparts.hover(function(){ //onMouseover","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tconfig.autostep.hoverstate=\"over\"","\t\t\t}, function(){ //onMouseout","\t\t\t\tif (config.steptimer && config.autostep.hoverstate==\"over\" && config.autostep.status!=\"stopped\"){","\t\t\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause)","\t\t\t\t\tconfig.autostep.hoverstate=\"out\"","\t\t\t\t}","\t\t\t})","\t\t\tclearTimeout(config.steptimer)","\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause) //automatically rotate Carousel Viewer","\t\t} //end enable auto stepping check","\t\tthis.createpaginate($, config)","","","\t\t// Set up mouse drag/ swipe to navigate function","\t\tvar mousemoveevtstr = 'mousemove.dragstart' + config.galleryid + ' touchmove.dragstart' + config.galleryid","\t\tvar mouseupevtstr = 'mouseup.dragend' + config.galleryid + ' touchend.dragend' + config.galleryid","\t\tvar mousedist = 0, mouseduration = 0","  \tconfig.$gallery.bind('mousedown touchstart', function(e){","  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\tvar mousex = e.pageX","\t\t\tmousedist = 0","\t\t\tmouseduration = 0","\t\t\tvar clicktime= new Date().getTime()","  \t\t$(document).bind(mousemoveevtstr, function(e){","  \t\t\tvar e = (e.type.indexOf('touch') != '-1')? e.originalEvent.changedTouches[0] : e","  \t\t\tmousedist = e.pageX-mousex //distance to move horizontally","\t\t\t\tmouseduration = new Date().getTime() - clicktime","  \t\t\treturn false //cancel default drag action","  \t\t})","\t  \t$(document).bind(mouseupevtstr, function(e){","\t  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\t\tif (Math.abs(mousedist) > stepcarousel.swipethreshold[0] && mouseduration < stepcarousel.swipethreshold[1]){","\t\t\t\t\tvar dir = (mousedist < 0)? 'right' : 'left'","\t\t\t\t\tstepcarousel.stepBy(config.galleryid, ((dir == 'right')? 1 : -1) * config.defaultbuttons.moveby)","\t\t\t\t\tif (config.autostep)","\t\t\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\t}","\t  \t\t$(document).unbind(mousemoveevtstr)","\t  \t\t$(document).unbind(mouseupevtstr)","\t\t\t\te.preventDefault()","\t  \t})\t","  \t\te.preventDefault() //cancel default drag action","  \t})","","\t\tconfig.$gallery.bind('click', function(e){","\t\t\tif (mousedist != 0) // if dragging on belt instead of clicking on it","\t\t\t\te.preventDefault() // prevent default action of navigating to link","\t\t})","","\t\tthis.statusreport(config.galleryid)","\t\tif (typeof config.oninitcalled == 'undefined'){ // only call oninit once","\t\t\tconfig.oninit()","\t\t\tconfig.oninitcalled = true","\t\t}","\t\tconfig.onslideaction(this)","\t},","","\tstepTo:function(galleryid, pindex){ /*User entered pindex starts at 1 for intuitiveness. Internally pindex still starts at 0 */","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tstepcarousel.stopautostep(config)","\t\tvar pindex=Math.min(pindex-1, config.paneloffsets.length-1)","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset)","\t\tif (config.panelbehavior.wraparound==false && config.defaultbuttons.enable==true){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, pindex)","\t\t}","\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tstepBy:function(galleryid, steps, isauto){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tif (!isauto) //if stepBy() function isn't called by autorotate() function","\t\t\tstepcarousel.stopautostep(config)","\t\tvar direction=(steps>0)? 'forward' : 'back' //If \"steps\" is negative, that means backwards","\t\tvar pindex=config.currentpanel+steps //index of panel to stop at","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tpindex=(direction==\"back\" && pindex<=0)? 0 : (direction==\"forward\")? Math.min(pindex, config.lastvisiblepanel) : pindex","\t\t\tif (config.defaultbuttons.enable==true){ //if default nav buttons are enabled, fade them in and out depending on if at start or end of carousel","\t\t\t\tstepcarousel.fadebuttons(config, pindex)","\t\t\t}\t","\t\t}","\t\telse{ //else, for normal stepBy behavior","\t\t\tif (pindex>config.lastvisiblepanel && direction==\"forward\"){","\t\t\t\t//if destination pindex is greater than last visible panel, yet we're currently not at the end of the carousel yet","\t\t\t\tpindex=(config.currentpanel<config.lastvisiblepanel)? config.lastvisiblepanel : 0","\t\t\t}","\t\t\telse if (pindex<0 && direction==\"back\"){","\t\t\t\t//if destination pindex is less than 0, yet we're currently not at the beginning of the carousel yet","\t\t\t\tpindex=(config.currentpanel>0)? 0 : config.lastvisiblepanel /*wrap around left*/","\t\t\t}","\t\t}","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset) //left distance for Belt DIV to travel to","\t\tif (config.panelbehavior.wraparound==true && config.panelbehavior.wrapbehavior==\"pushpull\" && (pindex==0 && direction=='forward' || config.currentpanel==0 && direction=='back')){ //decide whether to apply \"push pull\" effect","\t\t\tconfig.$belt.animate({left: -config.paneloffsets[config.currentpanel]-(direction=='forward'? 100 : -30)+'px'}, 'normal', function(){","\t\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\t\t})","\t\t}","\t\telse","\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tautorotate:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.$belt.stop(true, true)","\t\tthis.stepBy(galleryid, config.autostep.moveby, true)","\t},","","\tstopautostep:function(config){","\t\tclearTimeout(config.steptimer)","\t},","","\tstatusreport:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.statusvars.length==3){ //if 3 status vars defined","\t\t\tvar startpoint=config.currentpanel //index of first visible panel ","\t\t\tvar visiblewidth=0","\t\t\tfor (var endpoint=startpoint; endpoint<config.paneloffsets.length; endpoint++){ //index (endpoint) of last visible panel","\t\t\t\tvisiblewidth+=config.panelwidths[endpoint]","\t\t\t\tif (visiblewidth>config.gallerywidth){","\t\t\t\t\tbreak","\t\t\t\t}","\t\t\t}","\t\t\tstartpoint+=1 //format startpoint for user friendiness","\t\t\tendpoint=(endpoint+1==startpoint)? startpoint : endpoint //If only one image visible on the screen and partially hidden, set endpoint to startpoint","\t\t\tvar valuearray=[startpoint, endpoint, config.panelwidths.length]","\t\t\tfor (var i=0; i<config.statusvars.length; i++){","\t\t\t\twindow[config.statusvars[i]]=valuearray[i] //Define variable (with user specified name) and set to one of the status values","\t\t\t\tconfig.$statusobjs[i].text(valuearray[i]+\" \") //Populate element on page with ID=\"user specified name\" with one of the status values","\t\t\t}","\t\t}","\t\tstepcarousel.selectpaginate(jQuery, galleryid)","\t},","","\tcreatepaginate:function($, config){","\t\tif (config.$paginatediv.length==1){","\t\t\tvar $templatebutt=config.$paginatediv.find('*[data-moveby]:eq(0)') //reference first matching button on page","\t\t\tvar isimg = $templatebutt.is('img')","\t\t\tvar controlpoints=[], controlsrc=[], buttonarray=[], moveby=$templatebutt.attr(\"data-moveby\") || 1","\t\t\tvar asize=(moveby==1? 0:1) + Math.floor((config.lastvisiblepanel+1) / moveby) //calculate # of pagination links to create","\t\t\tvar buttonhtml=$('<div>').append($templatebutt.clone()).html() //get HTML of first matching button","\t\t\tvar buttontag = $(buttonhtml).get(0).tagName","\t\t\tconfig.navbuttonhtml = buttonhtml","\t\t\tif (isimg)","\t\t\t\tvar srcs=[$templatebutt.attr('src'), $templatebutt.attr('data-over'), $templatebutt.attr('data-select')] //remember control's over and out, and selected image src","\t\t\tfor (var i=0; i<asize; i++){","\t\t\t\tvar moveto=Math.min(i*moveby, config.lastvisiblepanel)","\t\t\t\tbuttonarray.push(buttonhtml.replace(/>/, ' data-index=\"'+i+'\" data-moveto=\"'+moveto+'\" title=\"Move to Panel '+(moveto+1)+'\">') +'\\n')","\t\t\t\tcontrolpoints.push(moveto) //store panel index each control goes to when clicked on","\t\t\t}","\t\t\tvar $controls=config.$paginatediv.html(buttonarray.join('')).find(buttontag) //replace template link with links and return them","\t\t\t$controls.css({cursor:'pointer'})","\t\t\tconfig.$paginatediv.bind('click', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif ($target.attr('data-moveby')){","\t\t\t\t\tstepcarousel.stepTo(config.galleryid, parseInt($target.attr('data-moveto'))+1)","\t\t\t\t}","\t\t\t})","\t\t\tconfig.$paginatediv.bind('mouseover mouseout', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif (isimg && $target.attr('data-over')){","\t\t\t\t\tif (parseInt($target.attr('data-index')) != config.pageinfo.curselected) //if this isn't the selected link","\t\t\t\t\t\t$target.attr('src', srcs[(e.type==\"mouseover\")? 1 : 0])","\t\t\t\t}","\t\t\t})","\t\t\tconfig.pageinfo={controlpoints:controlpoints, $controls:$controls,  srcs:srcs, prevselected:null, curselected:null, isimg: isimg}","\t\t}","\t},","","\t","\tselectpaginate:function($, galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.$paginatediv.length==1){","\t\t\tvar isimg = config.pageinfo.isimg","\t\t\tfor (var i=0; i<config.pageinfo.controlpoints.length; i++){","\t\t\t\tif (config.pageinfo.controlpoints[i] <= config.currentpanel) //find largest control point that's less than or equal to current panel shown","\t\t\t\t\tconfig.pageinfo.curselected=i","\t\t\t}","\t\t\tif (config.pageinfo.prevselected!=null){ //deselect previously selected link (if found)","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).removeClass('selected')","\t\t\t\tif (isimg){","\t\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).attr('src', config.pageinfo.srcs[0])","\t\t\t\t}","\t\t\t}","\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).addClass('selected') //select current paginate link","\t\t\tif (isimg){","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).attr('src', config.pageinfo.srcs[2])","\t\t\t}","\t\t\tconfig.pageinfo.prevselected=config.pageinfo.curselected //set current selected link to previous","\t\t}","\t},","","","\tloadcontent:function(galleryid, url){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.contenttype=['ajax', url]","\t\tstepcarousel.stopautostep(config)","\t\tstepcarousel.resetsettings($, config, true)","\t\tstepcarousel.init(jQuery, config)","","\t},","","\tinit:function($, config, triggertype){","\t\tconfig.gallerywidth=config.$gallery.width()","\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\tconfig.$belt=config.$gallery.find('.'+config.beltclass) //Find Belt DIV that contains all the panels","\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass) //Find Panel DIVs that each contain a slide","\t\tconfig.panelbehavior.wrapbehavior=config.panelbehavior.wrapbehavior || \"pushpull\" //default wrap behavior to \"pushpull\"","\t\tconfig.$paginatediv=$('#'+config.galleryid+'-paginate') //get pagination DIV (if defined)","\t\tif (config.autostep)","\t\t\tconfig.autostep.pause+=config.panelbehavior.speed","\t\tconfig.onpanelclick=(typeof config.onpanelclick==\"undefined\")? function(target){} : config.onpanelclick //attach custom \"onpanelclick\" event handler","\t\tconfig.onslideaction=(typeof config.onslide==\"undefined\")? function(){} : function(beltobj){$(beltobj).stop(); config.onslide()} //attach custom \"onslide\" event handler","\t\tconfig.oninit=(typeof config.oninit==\"undefined\")? function(){} : config.oninit //attach custom \"oninit\" event handler","\t\tconfig.beltoffset=stepcarousel.getCSSValue(config.$belt.css('marginLeft')) //Find length of Belt DIV's left margin","\t\tconfig.statusvars=config.statusvars || []  //get variable names that will hold \"start\", \"end\", and \"total\" slides info","\t\tconfig.$statusobjs=[$('#'+config.statusvars[0]), $('#'+config.statusvars[1]), $('#'+config.statusvars[2])]","\t\tconfig.currentpanel=0","\t\tstepcarousel.configholder[config.galleryid]=config //store config parameter as a variable","\t\tif (config.contenttype[0]==\"ajax\" && typeof config.contenttype[1]!=\"undefined\" && triggertype != 'windowresize') //fetch ajax content?","\t\t\tstepcarousel.getremotepanels($, config)","\t\telse","\t\t\tstepcarousel.alignpanels($, config) //align panels and initialize gallery","\t},","","\tresetsettings:function($, config, emptybelt){","\t\tstepcarousel.windowisresized = true","\t\tconfig.$gallery.unbind()","\t\tconfig.$belt.stop()","\t\tif (emptybelt){","\t\t\tconfig.$panels.remove()","\t\t}","\t\tconfig.$panels.unbind()","\t\tif (config.defaultbuttons.enable){","\t\t\tconfig.$leftnavbutton.remove()","\t\t\tconfig.$rightnavbutton.remove()","\t\t}","\t\tif (config.$paginatediv.length==1){","\t\t\tconfig.$paginatediv.unbind()","\t\t\tconfig.$paginatediv.empty()","\t\t\tconfig.$paginatediv.html(config.navbuttonhtml)","\t\t}","\t\tif (config.autostep)","\t\t\tconfig.autostep.status=null","\t\tif (config.panelbehavior.persist){","\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0) //set initial panel to 0, overridden w/ current panel if window.unload is invoked","\t\t}","\t},","","\tsetup:function(config){","\t\t//Disable Step Gallery scrollbars ASAP dynamically (enabled for sake of users with JS disabled)","\t\tdocument.write('<style type=\"text/css\">\\n#'+config.galleryid+'{overflow: hidden;}\\n</style>')","\t\tjQuery(document).ready(function($){","\t\t\tconfig.$gallery=$('#'+config.galleryid)","\t\t\tstepcarousel.init($, config)","\t\t}) //end document.ready","\t\tjQuery(window).bind('resize', function(){ // when window is resized, refresh carousel","\t\t\tclearTimeout(config.windowresizetimer)","\t\t\tconfig.windowresizetimer = setTimeout(function(){ // call resize function just once","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tstepcarousel.resetsettings(jQuery, config)","\t\t\t\tif (config.panelbehavior.persist)","\t\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0)","\t\t\t\tstepcarousel.init(jQuery, config, 'windowresize')","\t\t\t}, 200)","\t\t})","\t\tjQuery(window).bind('unload', function(){ //clean up on page unload","\t\t\tstepcarousel.resetsettings($, config, true)","\t\t\tif (config.panelbehavior.persist)","\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", config.currentpanel)","\t\t\tjQuery.each(config, function(ai, oi){","\t\t\t\toi=null","\t\t\t})","\t\t\tconfig=null","\t\t})","\t}","}","",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":409,"column":0},"action":"remove","lines":["//** Step Carousel Viewer- (c) Dynamic Drive DHTML code library: http://www.dynamicdrive.com","//** Script Download/ http://www.dynamicdrive.com/dynamicindex4/stepcarousel.htm","//** Usage Terms: http://www.dynamicdrive.com/notice.htm","//** Current version 1.91 (Aug 15th, 11'): See http://www.dynamicdrive.com/dynamicindex4/stepcarouselchangelog.txt for details","","","jQuery.noConflict()","","var stepcarousel={","\tajaxloadingmsg: '<div style=\"margin: 1em; font-weight: bold\"><img src=\"ajaxloadr.gif\" style=\"vertical-align: middle\" /> Fetching Content. Please wait...</div>', //customize HTML to show while fetching Ajax content","\tdefaultbuttonsfade: 0.4, //Fade degree for disabled nav buttons (0=completely transparent, 1=completely opaque)","\tswipethreshold: [50, 300], // distance traveled within x milliseconds before it is considered a swipe [pixels, milliseconds]","\tconfigholder: {},","","\tgetCSSValue:function(val){ //Returns either 0 (if val contains 'auto') or val as an integer","\t\treturn (val==\"auto\")? 0 : parseInt(val)","\t},","","\tgetremotepanels:function($, config){ //function to fetch external page containing the panel DIVs","\t\tconfig.$belt.html(this.ajaxloadingmsg)","\t\t$.ajax({","\t\t\turl: config.contenttype[1], //path to external content","\t\t\tasync: true,","\t\t\tdataType: 'html',","\t\t\terror:function(ajaxrequest){","\t\t\t\tconfig.$belt.html('Error fetching content.<br />Server Response: '+ajaxrequest.responseText)","\t\t\t},","\t\t\tsuccess:function(content){","\t\t\t\tconfig.$belt.html(content)","\t\t\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass)","\t\t\t\tstepcarousel.alignpanels($, config)","\t\t\t}","\t\t})","\t},","","\tgetoffset:function(what, offsettype){","\t\treturn (what.offsetParent)? what[offsettype]+this.getoffset(what.offsetParent, offsettype) : what[offsettype]","\t},","","\tgetCookie:function(Name){ ","\t\tvar re=new RegExp(Name+\"=[^;]+\", \"i\"); //construct RE to search for target name/value pair","\t\tif (document.cookie.match(re)) //if cookie found","\t\t\treturn document.cookie.match(re)[0].split(\"=\")[1] //return its value","\t\treturn null","\t},","","\tsetCookie:function(name, value){","\t\tdocument.cookie = name+\"=\"+value","\t},","","\tfadebuttons:function(config, currentpanel){","\t\tconfig.$leftnavbutton.fadeTo('fast', currentpanel==0? this.defaultbuttonsfade : 1)","\t\tconfig.$rightnavbutton.fadeTo('fast', currentpanel==config.lastvisiblepanel? this.defaultbuttonsfade : 1)","\t\tif (currentpanel==config.lastvisiblepanel){","\t\t\tstepcarousel.stopautostep(config)","\t\t}","","\t},","","\taddnavbuttons:function($, config, currentpanel){","\t\tconfig.$leftnavbutton=$('<img src=\"'+config.defaultbuttons.leftnav[0]+'\" class=\"' + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Back '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$rightnavbutton=$('<img src=\"'+config.defaultbuttons.rightnav[0]+'\" class=\"'  + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Forward '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$leftnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, -config.defaultbuttons.moveby)","\t\t})","\t\tconfig.$rightnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, config.defaultbuttons.moveby)","\t\t})","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, currentpanel)","\t\t}","\t\treturn config.$leftnavbutton.add(config.$rightnavbutton)","\t},","","\talignpanels:function($, config){","\t\tvar paneloffset=0","\t\tconfig.paneloffsets=[paneloffset] //array to store upper left offset of each panel (1st element=0)","\t\tconfig.panelwidths=[] //array to store widths of each panel","\t\tconfig.$panels.each(function(index){ //loop through panels","\t\t\tvar $currentpanel=$(this)","\t\t\t$currentpanel.css({float: 'none', position: 'absolute', left: paneloffset+'px'}) //position panel","\t\t\t$currentpanel.bind('click', function(e){ //bind onpanelclick() to onclick event","\t\t\t\tif (mousedist == 0) // if this was an actual click, instead of swipe","\t\t\t\treturn config.onpanelclick(e.target)","\t\t\t})","\t\t\tpaneloffset+=stepcarousel.getCSSValue($currentpanel.css('marginRight')) + parseInt($currentpanel.get(0).offsetWidth || $currentpanel.css('width')) //calculate next panel offset","\t\t\tconfig.paneloffsets.push(paneloffset) //remember this offset","\t\t\tconfig.panelwidths.push(paneloffset-config.paneloffsets[config.paneloffsets.length-2]) //remember panel width","\t\t})","\t\tconfig.paneloffsets.pop() //delete last offset (redundant)","\t\tvar addpanelwidths=0","\t\tvar lastpanelindex=config.$panels.length-1","\t\tconfig.lastvisiblepanel=lastpanelindex","\t\tfor (var i=config.$panels.length-1; i>=0; i--){","\t\t\taddpanelwidths+=(i==lastpanelindex? config.panelwidths[lastpanelindex] : config.paneloffsets[i+1]-config.paneloffsets[i])","\t\t\tif (config.gallerywidth>addpanelwidths){","\t\t\t\tconfig.lastvisiblepanel=i //calculate index of panel that when in 1st position reveals the very last panel all at once based on gallery width","\t\t\t}","\t\t}","\t\tconfig.$belt.css({width: paneloffset+'px'}) //Set Belt DIV to total panels' widths","\t\tconfig.currentpanel=(config.panelbehavior.persist)? parseInt(this.getCookie(config.galleryid+\"persist\")) : 0 //determine 1st panel to show by default","\t\tconfig.currentpanel=(typeof config.currentpanel==\"number\" && config.currentpanel<config.$panels.length)? config.currentpanel : 0","\t\tvar endpoint=config.paneloffsets[config.currentpanel]+(config.currentpanel==0? 0 : config.beltoffset)","\t\tconfig.$belt.css({left: -endpoint+'px'})","\t\tif (config.defaultbuttons.enable==true){ //if enable default back/forth nav buttons","\t\t\tvar $navbuttons=this.addnavbuttons($, config, config.currentpanel)","\t\t\t$(window).bind(\"load resize\", function(){ //refresh position of nav buttons when page loads/resizes, in case offsets weren't available document.oncontentload","\t\t\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\t\t\tconfig.$leftnavbutton.css({left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px'})","\t\t\t\tconfig.$rightnavbutton.css({left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px'})","\t\t\t})","\t\t}","\t\tif (config.autostep && config.autostep.enable){ //enable auto stepping of Carousel?\t\t","\t\t\tvar $carouselparts=config.$gallery.add(typeof $navbuttons!=\"undefined\"? $navbuttons : null)","\t\t\t$carouselparts.bind('click', function(){","\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t})","\t\t\t$carouselparts.hover(function(){ //onMouseover","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tconfig.autostep.hoverstate=\"over\"","\t\t\t}, function(){ //onMouseout","\t\t\t\tif (config.steptimer && config.autostep.hoverstate==\"over\" && config.autostep.status!=\"stopped\"){","\t\t\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause)","\t\t\t\t\tconfig.autostep.hoverstate=\"out\"","\t\t\t\t}","\t\t\t})","\t\t\tclearTimeout(config.steptimer)","\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause) //automatically rotate Carousel Viewer","\t\t} //end enable auto stepping check","\t\tthis.createpaginate($, config)","","","\t\t// Set up mouse drag/ swipe to navigate function","\t\tvar mousemoveevtstr = 'mousemove.dragstart' + config.galleryid + ' touchmove.dragstart' + config.galleryid","\t\tvar mouseupevtstr = 'mouseup.dragend' + config.galleryid + ' touchend.dragend' + config.galleryid","\t\tvar mousedist = 0, mouseduration = 0","  \tconfig.$gallery.bind('mousedown touchstart', function(e){","  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\tvar mousex = e.pageX","\t\t\tmousedist = 0","\t\t\tmouseduration = 0","\t\t\tvar clicktime= new Date().getTime()","  \t\t$(document).bind(mousemoveevtstr, function(e){","  \t\t\tvar e = (e.type.indexOf('touch') != '-1')? e.originalEvent.changedTouches[0] : e","  \t\t\tmousedist = e.pageX-mousex //distance to move horizontally","\t\t\t\tmouseduration = new Date().getTime() - clicktime","  \t\t\treturn false //cancel default drag action","  \t\t})","\t  \t$(document).bind(mouseupevtstr, function(e){","\t  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\t\tif (Math.abs(mousedist) > stepcarousel.swipethreshold[0] && mouseduration < stepcarousel.swipethreshold[1]){","\t\t\t\t\tvar dir = (mousedist < 0)? 'right' : 'left'","\t\t\t\t\tstepcarousel.stepBy(config.galleryid, ((dir == 'right')? 1 : -1) * config.defaultbuttons.moveby)","\t\t\t\t\tif (config.autostep)","\t\t\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\t}","\t  \t\t$(document).unbind(mousemoveevtstr)","\t  \t\t$(document).unbind(mouseupevtstr)","\t\t\t\te.preventDefault()","\t  \t})\t","  \t\te.preventDefault() //cancel default drag action","  \t})","","\t\tconfig.$gallery.bind('click', function(e){","\t\t\tif (mousedist != 0) // if dragging on belt instead of clicking on it","\t\t\t\te.preventDefault() // prevent default action of navigating to link","\t\t})","","\t\tthis.statusreport(config.galleryid)","\t\tif (typeof config.oninitcalled == 'undefined'){ // only call oninit once","\t\t\tconfig.oninit()","\t\t\tconfig.oninitcalled = true","\t\t}","\t\tconfig.onslideaction(this)","\t},","","\tstepTo:function(galleryid, pindex){ /*User entered pindex starts at 1 for intuitiveness. Internally pindex still starts at 0 */","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tstepcarousel.stopautostep(config)","\t\tvar pindex=Math.min(pindex-1, config.paneloffsets.length-1)","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset)","\t\tif (config.panelbehavior.wraparound==false && config.defaultbuttons.enable==true){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, pindex)","\t\t}","\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tstepBy:function(galleryid, steps, isauto){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tif (!isauto) //if stepBy() function isn't called by autorotate() function","\t\t\tstepcarousel.stopautostep(config)","\t\tvar direction=(steps>0)? 'forward' : 'back' //If \"steps\" is negative, that means backwards","\t\tvar pindex=config.currentpanel+steps //index of panel to stop at","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tpindex=(direction==\"back\" && pindex<=0)? 0 : (direction==\"forward\")? Math.min(pindex, config.lastvisiblepanel) : pindex","\t\t\tif (config.defaultbuttons.enable==true){ //if default nav buttons are enabled, fade them in and out depending on if at start or end of carousel","\t\t\t\tstepcarousel.fadebuttons(config, pindex)","\t\t\t}\t","\t\t}","\t\telse{ //else, for normal stepBy behavior","\t\t\tif (pindex>config.lastvisiblepanel && direction==\"forward\"){","\t\t\t\t//if destination pindex is greater than last visible panel, yet we're currently not at the end of the carousel yet","\t\t\t\tpindex=(config.currentpanel<config.lastvisiblepanel)? config.lastvisiblepanel : 0","\t\t\t}","\t\t\telse if (pindex<0 && direction==\"back\"){","\t\t\t\t//if destination pindex is less than 0, yet we're currently not at the beginning of the carousel yet","\t\t\t\tpindex=(config.currentpanel>0)? 0 : config.lastvisiblepanel /*wrap around left*/","\t\t\t}","\t\t}","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset) //left distance for Belt DIV to travel to","\t\tif (config.panelbehavior.wraparound==true && config.panelbehavior.wrapbehavior==\"pushpull\" && (pindex==0 && direction=='forward' || config.currentpanel==0 && direction=='back')){ //decide whether to apply \"push pull\" effect","\t\t\tconfig.$belt.animate({left: -config.paneloffsets[config.currentpanel]-(direction=='forward'? 100 : -30)+'px'}, 'normal', function(){","\t\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\t\t})","\t\t}","\t\telse","\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tautorotate:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.$belt.stop(true, true)","\t\tthis.stepBy(galleryid, config.autostep.moveby, true)","\t},","","\tstopautostep:function(config){","\t\tclearTimeout(config.steptimer)","\t},","","\tstatusreport:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.statusvars.length==3){ //if 3 status vars defined","\t\t\tvar startpoint=config.currentpanel //index of first visible panel ","\t\t\tvar visiblewidth=0","\t\t\tfor (var endpoint=startpoint; endpoint<config.paneloffsets.length; endpoint++){ //index (endpoint) of last visible panel","\t\t\t\tvisiblewidth+=config.panelwidths[endpoint]","\t\t\t\tif (visiblewidth>config.gallerywidth){","\t\t\t\t\tbreak","\t\t\t\t}","\t\t\t}","\t\t\tstartpoint+=1 //format startpoint for user friendiness","\t\t\tendpoint=(endpoint+1==startpoint)? startpoint : endpoint //If only one image visible on the screen and partially hidden, set endpoint to startpoint","\t\t\tvar valuearray=[startpoint, endpoint, config.panelwidths.length]","\t\t\tfor (var i=0; i<config.statusvars.length; i++){","\t\t\t\twindow[config.statusvars[i]]=valuearray[i] //Define variable (with user specified name) and set to one of the status values","\t\t\t\tconfig.$statusobjs[i].text(valuearray[i]+\" \") //Populate element on page with ID=\"user specified name\" with one of the status values","\t\t\t}","\t\t}","\t\tstepcarousel.selectpaginate(jQuery, galleryid)","\t},","","\tcreatepaginate:function($, config){","\t\tif (config.$paginatediv.length==1){","\t\t\tvar $templatebutt=config.$paginatediv.find('*[data-moveby]:eq(0)') //reference first matching button on page","\t\t\tvar isimg = $templatebutt.is('img')","\t\t\tvar controlpoints=[], controlsrc=[], buttonarray=[], moveby=$templatebutt.attr(\"data-moveby\") || 1","\t\t\tvar asize=(moveby==1? 0:1) + Math.floor((config.lastvisiblepanel+1) / moveby) //calculate # of pagination links to create","\t\t\tvar buttonhtml=$('<div>').append($templatebutt.clone()).html() //get HTML of first matching button","\t\t\tvar buttontag = $(buttonhtml).get(0).tagName","\t\t\tconfig.navbuttonhtml = buttonhtml","\t\t\tif (isimg)","\t\t\t\tvar srcs=[$templatebutt.attr('src'), $templatebutt.attr('data-over'), $templatebutt.attr('data-select')] //remember control's over and out, and selected image src","\t\t\tfor (var i=0; i<asize; i++){","\t\t\t\tvar moveto=Math.min(i*moveby, config.lastvisiblepanel)","\t\t\t\tbuttonarray.push(buttonhtml.replace(/>/, ' data-index=\"'+i+'\" data-moveto=\"'+moveto+'\" title=\"Move to Panel '+(moveto+1)+'\">') +'\\n')","\t\t\t\tcontrolpoints.push(moveto) //store panel index each control goes to when clicked on","\t\t\t}","\t\t\tvar $controls=config.$paginatediv.html(buttonarray.join('')).find(buttontag) //replace template link with links and return them","\t\t\t$controls.css({cursor:'pointer'})","\t\t\tconfig.$paginatediv.bind('click', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif ($target.attr('data-moveby')){","\t\t\t\t\tstepcarousel.stepTo(config.galleryid, parseInt($target.attr('data-moveto'))+1)","\t\t\t\t}","\t\t\t})","\t\t\tconfig.$paginatediv.bind('mouseover mouseout', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif (isimg && $target.attr('data-over')){","\t\t\t\t\tif (parseInt($target.attr('data-index')) != config.pageinfo.curselected) //if this isn't the selected link","\t\t\t\t\t\t$target.attr('src', srcs[(e.type==\"mouseover\")? 1 : 0])","\t\t\t\t}","\t\t\t})","\t\t\tconfig.pageinfo={controlpoints:controlpoints, $controls:$controls,  srcs:srcs, prevselected:null, curselected:null, isimg: isimg}","\t\t}","\t},","","\t","\tselectpaginate:function($, galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.$paginatediv.length==1){","\t\t\tvar isimg = config.pageinfo.isimg","\t\t\tfor (var i=0; i<config.pageinfo.controlpoints.length; i++){","\t\t\t\tif (config.pageinfo.controlpoints[i] <= config.currentpanel) //find largest control point that's less than or equal to current panel shown","\t\t\t\t\tconfig.pageinfo.curselected=i","\t\t\t}","\t\t\tif (config.pageinfo.prevselected!=null){ //deselect previously selected link (if found)","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).removeClass('selected')","\t\t\t\tif (isimg){","\t\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).attr('src', config.pageinfo.srcs[0])","\t\t\t\t}","\t\t\t}","\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).addClass('selected') //select current paginate link","\t\t\tif (isimg){","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).attr('src', config.pageinfo.srcs[2])","\t\t\t}","\t\t\tconfig.pageinfo.prevselected=config.pageinfo.curselected //set current selected link to previous","\t\t}","\t},","","","\tloadcontent:function(galleryid, url){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.contenttype=['ajax', url]","\t\tstepcarousel.stopautostep(config)","\t\tstepcarousel.resetsettings($, config, true)","\t\tstepcarousel.init(jQuery, config)","","\t},","","\tinit:function($, config, triggertype){","\t\tconfig.gallerywidth=config.$gallery.width()","\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\tconfig.$belt=config.$gallery.find('.'+config.beltclass) //Find Belt DIV that contains all the panels","\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass) //Find Panel DIVs that each contain a slide","\t\tconfig.panelbehavior.wrapbehavior=config.panelbehavior.wrapbehavior || \"pushpull\" //default wrap behavior to \"pushpull\"","\t\tconfig.$paginatediv=$('#'+config.galleryid+'-paginate') //get pagination DIV (if defined)","\t\tif (config.autostep)","\t\t\tconfig.autostep.pause+=config.panelbehavior.speed","\t\tconfig.onpanelclick=(typeof config.onpanelclick==\"undefined\")? function(target){} : config.onpanelclick //attach custom \"onpanelclick\" event handler","\t\tconfig.onslideaction=(typeof config.onslide==\"undefined\")? function(){} : function(beltobj){$(beltobj).stop(); config.onslide()} //attach custom \"onslide\" event handler","\t\tconfig.oninit=(typeof config.oninit==\"undefined\")? function(){} : config.oninit //attach custom \"oninit\" event handler","\t\tconfig.beltoffset=stepcarousel.getCSSValue(config.$belt.css('marginLeft')) //Find length of Belt DIV's left margin","\t\tconfig.statusvars=config.statusvars || []  //get variable names that will hold \"start\", \"end\", and \"total\" slides info","\t\tconfig.$statusobjs=[$('#'+config.statusvars[0]), $('#'+config.statusvars[1]), $('#'+config.statusvars[2])]","\t\tconfig.currentpanel=0","\t\tstepcarousel.configholder[config.galleryid]=config //store config parameter as a variable","\t\tif (config.contenttype[0]==\"ajax\" && typeof config.contenttype[1]!=\"undefined\" && triggertype != 'windowresize') //fetch ajax content?","\t\t\tstepcarousel.getremotepanels($, config)","\t\telse","\t\t\tstepcarousel.alignpanels($, config) //align panels and initialize gallery","\t},","","\tresetsettings:function($, config, emptybelt){","\t\tstepcarousel.windowisresized = true","\t\tconfig.$gallery.unbind()","\t\tconfig.$belt.stop()","\t\tif (emptybelt){","\t\t\tconfig.$panels.remove()","\t\t}","\t\tconfig.$panels.unbind()","\t\tif (config.defaultbuttons.enable){","\t\t\tconfig.$leftnavbutton.remove()","\t\t\tconfig.$rightnavbutton.remove()","\t\t}","\t\tif (config.$paginatediv.length==1){","\t\t\tconfig.$paginatediv.unbind()","\t\t\tconfig.$paginatediv.empty()","\t\t\tconfig.$paginatediv.html(config.navbuttonhtml)","\t\t}","\t\tif (config.autostep)","\t\t\tconfig.autostep.status=null","\t\tif (config.panelbehavior.persist){","\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0) //set initial panel to 0, overridden w/ current panel if window.unload is invoked","\t\t}","\t},","","\tsetup:function(config){","\t\t//Disable Step Gallery scrollbars ASAP dynamically (enabled for sake of users with JS disabled)","\t\tdocument.write('<style type=\"text/css\">\\n#'+config.galleryid+'{overflow: hidden;}\\n</style>')","\t\tjQuery(document).ready(function($){","\t\t\tconfig.$gallery=$('#'+config.galleryid)","\t\t\tstepcarousel.init($, config)","\t\t}) //end document.ready","\t\tjQuery(window).bind('resize', function(){ // when window is resized, refresh carousel","\t\t\tclearTimeout(config.windowresizetimer)","\t\t\tconfig.windowresizetimer = setTimeout(function(){ // call resize function just once","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tstepcarousel.resetsettings(jQuery, config)","\t\t\t\tif (config.panelbehavior.persist)","\t\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0)","\t\t\t\tstepcarousel.init(jQuery, config, 'windowresize')","\t\t\t}, 200)","\t\t})","\t\tjQuery(window).bind('unload', function(){ //clean up on page unload","\t\t\tstepcarousel.resetsettings($, config, true)","\t\t\tif (config.panelbehavior.persist)","\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", config.currentpanel)","\t\t\tjQuery.each(config, function(ai, oi){","\t\t\t\toi=null","\t\t\t})","\t\t\tconfig=null","\t\t})","\t}","}","",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":409,"column":0},"action":"insert","lines":["//** Step Carousel Viewer- (c) Dynamic Drive DHTML code library: http://www.dynamicdrive.com","//** Script Download/ http://www.dynamicdrive.com/dynamicindex4/stepcarousel.htm","//** Usage Terms: http://www.dynamicdrive.com/notice.htm","//** Current version 1.91 (Aug 15th, 11'): See http://www.dynamicdrive.com/dynamicindex4/stepcarouselchangelog.txt for details","","","jQuery.noConflict()","","var stepcarousel={","\tajaxloadingmsg: '<div style=\"margin: 1em; font-weight: bold\"><img src=\"ajaxloadr.gif\" style=\"vertical-align: middle\" /> Fetching Content. Please wait...</div>', //customize HTML to show while fetching Ajax content","\tdefaultbuttonsfade: 0.4, //Fade degree for disabled nav buttons (0=completely transparent, 1=completely opaque)","\tswipethreshold: [50, 300], // distance traveled within x milliseconds before it is considered a swipe [pixels, milliseconds]","\tconfigholder: {},","","\tgetCSSValue:function(val){ //Returns either 0 (if val contains 'auto') or val as an integer","\t\treturn (val==\"auto\")? 0 : parseInt(val)","\t},","","\tgetremotepanels:function($, config){ //function to fetch external page containing the panel DIVs","\t\tconfig.$belt.html(this.ajaxloadingmsg)","\t\t$.ajax({","\t\t\turl: config.contenttype[1], //path to external content","\t\t\tasync: true,","\t\t\tdataType: 'html',","\t\t\terror:function(ajaxrequest){","\t\t\t\tconfig.$belt.html('Error fetching content.<br />Server Response: '+ajaxrequest.responseText)","\t\t\t},","\t\t\tsuccess:function(content){","\t\t\t\tconfig.$belt.html(content)","\t\t\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass)","\t\t\t\tstepcarousel.alignpanels($, config)","\t\t\t}","\t\t})","\t},","","\tgetoffset:function(what, offsettype){","\t\treturn (what.offsetParent)? what[offsettype]+this.getoffset(what.offsetParent, offsettype) : what[offsettype]","\t},","","\tgetCookie:function(Name){ ","\t\tvar re=new RegExp(Name+\"=[^;]+\", \"i\"); //construct RE to search for target name/value pair","\t\tif (document.cookie.match(re)) //if cookie found","\t\t\treturn document.cookie.match(re)[0].split(\"=\")[1] //return its value","\t\treturn null","\t},","","\tsetCookie:function(name, value){","\t\tdocument.cookie = name+\"=\"+value","\t},","","\tfadebuttons:function(config, currentpanel){","\t\tconfig.$leftnavbutton.fadeTo('fast', currentpanel==0? this.defaultbuttonsfade : 1)","\t\tconfig.$rightnavbutton.fadeTo('fast', currentpanel==config.lastvisiblepanel? this.defaultbuttonsfade : 1)","\t\tif (currentpanel==config.lastvisiblepanel){","\t\t\tstepcarousel.stopautostep(config)","\t\t}","","\t},","","\taddnavbuttons:function($, config, currentpanel){","\t\tconfig.$leftnavbutton=$('<img src=\"'+config.defaultbuttons.leftnav[0]+'\" class=\"' + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Back '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$rightnavbutton=$('<img src=\"'+config.defaultbuttons.rightnav[0]+'\" class=\"'  + config.galleryid + '_navbutton\">').css({zIndex:50, position:'absolute', left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px', cursor:'hand', cursor:'pointer'}).attr({title:'Forward '+config.defaultbuttons.moveby+' panels'}).appendTo('body')","\t\tconfig.$leftnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, -config.defaultbuttons.moveby)","\t\t})","\t\tconfig.$rightnavbutton.bind('click', function(){ //assign nav button event handlers","\t\t\tstepcarousel.stepBy(config.galleryid, config.defaultbuttons.moveby)","\t\t})","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, currentpanel)","\t\t}","\t\treturn config.$leftnavbutton.add(config.$rightnavbutton)","\t},","","\talignpanels:function($, config){","\t\tvar paneloffset=0","\t\tconfig.paneloffsets=[paneloffset] //array to store upper left offset of each panel (1st element=0)","\t\tconfig.panelwidths=[] //array to store widths of each panel","\t\tconfig.$panels.each(function(index){ //loop through panels","\t\t\tvar $currentpanel=$(this)","\t\t\t$currentpanel.css({float: 'none', position: 'absolute', left: paneloffset+'px'}) //position panel","\t\t\t$currentpanel.bind('click', function(e){ //bind onpanelclick() to onclick event","\t\t\t\tif (mousedist == 0) // if this was an actual click, instead of swipe","\t\t\t\treturn config.onpanelclick(e.target)","\t\t\t})","\t\t\tpaneloffset+=stepcarousel.getCSSValue($currentpanel.css('marginRight')) + parseInt($currentpanel.get(0).offsetWidth || $currentpanel.css('width')) //calculate next panel offset","\t\t\tconfig.paneloffsets.push(paneloffset) //remember this offset","\t\t\tconfig.panelwidths.push(paneloffset-config.paneloffsets[config.paneloffsets.length-2]) //remember panel width","\t\t})","\t\tconfig.paneloffsets.pop() //delete last offset (redundant)","\t\tvar addpanelwidths=0","\t\tvar lastpanelindex=config.$panels.length-1","\t\tconfig.lastvisiblepanel=lastpanelindex","\t\tfor (var i=config.$panels.length-1; i>=0; i--){","\t\t\taddpanelwidths+=(i==lastpanelindex? config.panelwidths[lastpanelindex] : config.paneloffsets[i+1]-config.paneloffsets[i])","\t\t\tif (config.gallerywidth>addpanelwidths){","\t\t\t\tconfig.lastvisiblepanel=i //calculate index of panel that when in 1st position reveals the very last panel all at once based on gallery width","\t\t\t}","\t\t}","\t\tconfig.$belt.css({width: paneloffset+'px'}) //Set Belt DIV to total panels' widths","\t\tconfig.currentpanel=(config.panelbehavior.persist)? parseInt(this.getCookie(config.galleryid+\"persist\")) : 0 //determine 1st panel to show by default","\t\tconfig.currentpanel=(typeof config.currentpanel==\"number\" && config.currentpanel<config.$panels.length)? config.currentpanel : 0","\t\tvar endpoint=config.paneloffsets[config.currentpanel]+(config.currentpanel==0? 0 : config.beltoffset)","\t\tconfig.$belt.css({left: -endpoint+'px'})","\t\tif (config.defaultbuttons.enable==true){ //if enable default back/forth nav buttons","\t\t\tvar $navbuttons=this.addnavbuttons($, config, config.currentpanel)","\t\t\t$(window).bind(\"load resize\", function(){ //refresh position of nav buttons when page loads/resizes, in case offsets weren't available document.oncontentload","\t\t\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\t\t\tconfig.$leftnavbutton.css({left:config.offsets.left+config.defaultbuttons.leftnav[1]+'px', top:config.offsets.top+config.defaultbuttons.leftnav[2]+'px'})","\t\t\t\tconfig.$rightnavbutton.css({left:config.offsets.left+config.$gallery.get(0).offsetWidth+config.defaultbuttons.rightnav[1]+'px', top:config.offsets.top+config.defaultbuttons.rightnav[2]+'px'})","\t\t\t})","\t\t}","\t\tif (config.autostep && config.autostep.enable){ //enable auto stepping of Carousel?\t\t","\t\t\tvar $carouselparts=config.$gallery.add(typeof $navbuttons!=\"undefined\"? $navbuttons : null)","\t\t\t$carouselparts.bind('click', function(){","\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t})","\t\t\t$carouselparts.hover(function(){ //onMouseover","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tconfig.autostep.hoverstate=\"over\"","\t\t\t}, function(){ //onMouseout","\t\t\t\tif (config.steptimer && config.autostep.hoverstate==\"over\" && config.autostep.status!=\"stopped\"){","\t\t\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause)","\t\t\t\t\tconfig.autostep.hoverstate=\"out\"","\t\t\t\t}","\t\t\t})","\t\t\tclearTimeout(config.steptimer)","\t\t\tconfig.steptimer=setInterval(function(){stepcarousel.autorotate(config.galleryid)}, config.autostep.pause) //automatically rotate Carousel Viewer","\t\t} //end enable auto stepping check","\t\tthis.createpaginate($, config)","","","\t\t// Set up mouse drag/ swipe to navigate function","\t\tvar mousemoveevtstr = 'mousemove.dragstart' + config.galleryid + ' touchmove.dragstart' + config.galleryid","\t\tvar mouseupevtstr = 'mouseup.dragend' + config.galleryid + ' touchend.dragend' + config.galleryid","\t\tvar mousedist = 0, mouseduration = 0","  \tconfig.$gallery.bind('mousedown touchstart', function(e){","  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\tvar mousex = e.pageX","\t\t\tmousedist = 0","\t\t\tmouseduration = 0","\t\t\tvar clicktime= new Date().getTime()","  \t\t$(document).bind(mousemoveevtstr, function(e){","  \t\t\tvar e = (e.type.indexOf('touch') != '-1')? e.originalEvent.changedTouches[0] : e","  \t\t\tmousedist = e.pageX-mousex //distance to move horizontally","\t\t\t\tmouseduration = new Date().getTime() - clicktime","  \t\t\treturn false //cancel default drag action","  \t\t})","\t  \t$(document).bind(mouseupevtstr, function(e){","\t  \t\tvar e = (e.type.indexOf('touch') != -1)? e.originalEvent.changedTouches[0] : e","\t\t\t\tif (Math.abs(mousedist) > stepcarousel.swipethreshold[0] && mouseduration < stepcarousel.swipethreshold[1]){","\t\t\t\t\tvar dir = (mousedist < 0)? 'right' : 'left'","\t\t\t\t\tstepcarousel.stepBy(config.galleryid, ((dir == 'right')? 1 : -1) * config.defaultbuttons.moveby)","\t\t\t\t\tif (config.autostep)","\t\t\t\t\t\tconfig.autostep.status=\"stopped\"","\t\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\t}","\t  \t\t$(document).unbind(mousemoveevtstr)","\t  \t\t$(document).unbind(mouseupevtstr)","\t\t\t\te.preventDefault()","\t  \t})\t","  \t\te.preventDefault() //cancel default drag action","  \t})","","\t\tconfig.$gallery.bind('click', function(e){","\t\t\tif (mousedist != 0) // if dragging on belt instead of clicking on it","\t\t\t\te.preventDefault() // prevent default action of navigating to link","\t\t})","","\t\tthis.statusreport(config.galleryid)","\t\tif (typeof config.oninitcalled == 'undefined'){ // only call oninit once","\t\t\tconfig.oninit()","\t\t\tconfig.oninitcalled = true","\t\t}","\t\tconfig.onslideaction(this)","\t},","","\tstepTo:function(galleryid, pindex){ /*User entered pindex starts at 1 for intuitiveness. Internally pindex still starts at 0 */","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tstepcarousel.stopautostep(config)","\t\tvar pindex=Math.min(pindex-1, config.paneloffsets.length-1)","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset)","\t\tif (config.panelbehavior.wraparound==false && config.defaultbuttons.enable==true){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tthis.fadebuttons(config, pindex)","\t\t}","\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tstepBy:function(galleryid, steps, isauto){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (typeof config==\"undefined\"){","\t\t\t//alert(\"There's an error with your set up of Carousel Viewer \\\"\"+galleryid+ \"\\\"!\")","\t\t\treturn","\t\t}","\t\tif (!isauto) //if stepBy() function isn't called by autorotate() function","\t\t\tstepcarousel.stopautostep(config)","\t\tvar direction=(steps>0)? 'forward' : 'back' //If \"steps\" is negative, that means backwards","\t\tvar pindex=config.currentpanel+steps //index of panel to stop at","\t\tif (config.panelbehavior.wraparound==false){ //if carousel viewer should stop at first or last panel (instead of wrap back or forth)","\t\t\tpindex=(direction==\"back\" && pindex<=0)? 0 : (direction==\"forward\")? Math.min(pindex, config.lastvisiblepanel) : pindex","\t\t\tif (config.defaultbuttons.enable==true){ //if default nav buttons are enabled, fade them in and out depending on if at start or end of carousel","\t\t\t\tstepcarousel.fadebuttons(config, pindex)","\t\t\t}\t","\t\t}","\t\telse{ //else, for normal stepBy behavior","\t\t\tif (pindex>config.lastvisiblepanel && direction==\"forward\"){","\t\t\t\t//if destination pindex is greater than last visible panel, yet we're currently not at the end of the carousel yet","\t\t\t\tpindex=(config.currentpanel<config.lastvisiblepanel)? config.lastvisiblepanel : 0","\t\t\t}","\t\t\telse if (pindex<0 && direction==\"back\"){","\t\t\t\t//if destination pindex is less than 0, yet we're currently not at the beginning of the carousel yet","\t\t\t\tpindex=(config.currentpanel>0)? 0 : config.lastvisiblepanel /*wrap around left*/","\t\t\t}","\t\t}","\t\tvar endpoint=config.paneloffsets[pindex]+(pindex==0? 0 : config.beltoffset) //left distance for Belt DIV to travel to","\t\tif (config.panelbehavior.wraparound==true && config.panelbehavior.wrapbehavior==\"pushpull\" && (pindex==0 && direction=='forward' || config.currentpanel==0 && direction=='back')){ //decide whether to apply \"push pull\" effect","\t\t\tconfig.$belt.animate({left: -config.paneloffsets[config.currentpanel]-(direction=='forward'? 100 : -30)+'px'}, 'normal', function(){","\t\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\t\t})","\t\t}","\t\telse","\t\t\tconfig.$belt.animate({left: -endpoint+'px'}, config.panelbehavior.speed, function(){config.onslideaction(this)})","\t\tconfig.currentpanel=pindex","\t\tthis.statusreport(galleryid)","\t},","","\tautorotate:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.$belt.stop(true, true)","\t\tthis.stepBy(galleryid, config.autostep.moveby, true)","\t},","","\tstopautostep:function(config){","\t\tclearTimeout(config.steptimer)","\t},","","\tstatusreport:function(galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.statusvars.length==3){ //if 3 status vars defined","\t\t\tvar startpoint=config.currentpanel //index of first visible panel ","\t\t\tvar visiblewidth=0","\t\t\tfor (var endpoint=startpoint; endpoint<config.paneloffsets.length; endpoint++){ //index (endpoint) of last visible panel","\t\t\t\tvisiblewidth+=config.panelwidths[endpoint]","\t\t\t\tif (visiblewidth>config.gallerywidth){","\t\t\t\t\tbreak","\t\t\t\t}","\t\t\t}","\t\t\tstartpoint+=1 //format startpoint for user friendiness","\t\t\tendpoint=(endpoint+1==startpoint)? startpoint : endpoint //If only one image visible on the screen and partially hidden, set endpoint to startpoint","\t\t\tvar valuearray=[startpoint, endpoint, config.panelwidths.length]","\t\t\tfor (var i=0; i<config.statusvars.length; i++){","\t\t\t\twindow[config.statusvars[i]]=valuearray[i] //Define variable (with user specified name) and set to one of the status values","\t\t\t\tconfig.$statusobjs[i].text(valuearray[i]+\" \") //Populate element on page with ID=\"user specified name\" with one of the status values","\t\t\t}","\t\t}","\t\tstepcarousel.selectpaginate(jQuery, galleryid)","\t},","","\tcreatepaginate:function($, config){","\t\tif (config.$paginatediv.length==1){","\t\t\tvar $templatebutt=config.$paginatediv.find('*[data-moveby]:eq(0)') //reference first matching button on page","\t\t\tvar isimg = $templatebutt.is('img')","\t\t\tvar controlpoints=[], controlsrc=[], buttonarray=[], moveby=$templatebutt.attr(\"data-moveby\") || 1","\t\t\tvar asize=(moveby==1? 0:1) + Math.floor((config.lastvisiblepanel+1) / moveby) //calculate # of pagination links to create","\t\t\tvar buttonhtml=$('<div>').append($templatebutt.clone()).html() //get HTML of first matching button","\t\t\tvar buttontag = $(buttonhtml).get(0).tagName","\t\t\tconfig.navbuttonhtml = buttonhtml","\t\t\tif (isimg)","\t\t\t\tvar srcs=[$templatebutt.attr('src'), $templatebutt.attr('data-over'), $templatebutt.attr('data-select')] //remember control's over and out, and selected image src","\t\t\tfor (var i=0; i<asize; i++){","\t\t\t\tvar moveto=Math.min(i*moveby, config.lastvisiblepanel)","\t\t\t\tbuttonarray.push(buttonhtml.replace(/>/, ' data-index=\"'+i+'\" data-moveto=\"'+moveto+'\" title=\"Move to Panel '+(moveto+1)+'\">') +'\\n')","\t\t\t\tcontrolpoints.push(moveto) //store panel index each control goes to when clicked on","\t\t\t}","\t\t\tvar $controls=config.$paginatediv.html(buttonarray.join('')).find(buttontag) //replace template link with links and return them","\t\t\t$controls.css({cursor:'pointer'})","\t\t\tconfig.$paginatediv.bind('click', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif ($target.attr('data-moveby')){","\t\t\t\t\tstepcarousel.stepTo(config.galleryid, parseInt($target.attr('data-moveto'))+1)","\t\t\t\t}","\t\t\t})","\t\t\tconfig.$paginatediv.bind('mouseover mouseout', function(e){","\t\t\t\tvar $target=$(e.target)","\t\t\t\tif (isimg && $target.attr('data-over')){","\t\t\t\t\tif (parseInt($target.attr('data-index')) != config.pageinfo.curselected) //if this isn't the selected link","\t\t\t\t\t\t$target.attr('src', srcs[(e.type==\"mouseover\")? 1 : 0])","\t\t\t\t}","\t\t\t})","\t\t\tconfig.pageinfo={controlpoints:controlpoints, $controls:$controls,  srcs:srcs, prevselected:null, curselected:null, isimg: isimg}","\t\t}","\t},","","\t","\tselectpaginate:function($, galleryid){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tif (config.$paginatediv.length==1){","\t\t\tvar isimg = config.pageinfo.isimg","\t\t\tfor (var i=0; i<config.pageinfo.controlpoints.length; i++){","\t\t\t\tif (config.pageinfo.controlpoints[i] <= config.currentpanel) //find largest control point that's less than or equal to current panel shown","\t\t\t\t\tconfig.pageinfo.curselected=i","\t\t\t}","\t\t\tif (config.pageinfo.prevselected!=null){ //deselect previously selected link (if found)","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).removeClass('selected')","\t\t\t\tif (isimg){","\t\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.prevselected).attr('src', config.pageinfo.srcs[0])","\t\t\t\t}","\t\t\t}","\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).addClass('selected') //select current paginate link","\t\t\tif (isimg){","\t\t\t\tconfig.pageinfo.$controls.eq(config.pageinfo.curselected).attr('src', config.pageinfo.srcs[2])","\t\t\t}","\t\t\tconfig.pageinfo.prevselected=config.pageinfo.curselected //set current selected link to previous","\t\t}","\t},","","","\tloadcontent:function(galleryid, url){","\t\tvar config=stepcarousel.configholder[galleryid]","\t\tconfig.contenttype=['ajax', url]","\t\tstepcarousel.stopautostep(config)","\t\tstepcarousel.resetsettings($, config, true)","\t\tstepcarousel.init(jQuery, config)","","\t},","","\tinit:function($, config, triggertype){","\t\tconfig.gallerywidth=config.$gallery.width()","\t\tconfig.offsets={left:stepcarousel.getoffset(config.$gallery.get(0), \"offsetLeft\"), top:stepcarousel.getoffset(config.$gallery.get(0), \"offsetTop\")}","\t\tconfig.$belt=config.$gallery.find('.'+config.beltclass) //Find Belt DIV that contains all the panels","\t\tconfig.$panels=config.$gallery.find('.'+config.panelclass) //Find Panel DIVs that each contain a slide","\t\tconfig.panelbehavior.wrapbehavior=config.panelbehavior.wrapbehavior || \"pushpull\" //default wrap behavior to \"pushpull\"","\t\tconfig.$paginatediv=$('#'+config.galleryid+'-paginate') //get pagination DIV (if defined)","\t\tif (config.autostep)","\t\t\tconfig.autostep.pause+=config.panelbehavior.speed","\t\tconfig.onpanelclick=(typeof config.onpanelclick==\"undefined\")? function(target){} : config.onpanelclick //attach custom \"onpanelclick\" event handler","\t\tconfig.onslideaction=(typeof config.onslide==\"undefined\")? function(){} : function(beltobj){$(beltobj).stop(); config.onslide()} //attach custom \"onslide\" event handler","\t\tconfig.oninit=(typeof config.oninit==\"undefined\")? function(){} : config.oninit //attach custom \"oninit\" event handler","\t\tconfig.beltoffset=stepcarousel.getCSSValue(config.$belt.css('marginLeft')) //Find length of Belt DIV's left margin","\t\tconfig.statusvars=config.statusvars || []  //get variable names that will hold \"start\", \"end\", and \"total\" slides info","\t\tconfig.$statusobjs=[$('#'+config.statusvars[0]), $('#'+config.statusvars[1]), $('#'+config.statusvars[2])]","\t\tconfig.currentpanel=0","\t\tstepcarousel.configholder[config.galleryid]=config //store config parameter as a variable","\t\tif (config.contenttype[0]==\"ajax\" && typeof config.contenttype[1]!=\"undefined\" && triggertype != 'windowresize') //fetch ajax content?","\t\t\tstepcarousel.getremotepanels($, config)","\t\telse","\t\t\tstepcarousel.alignpanels($, config) //align panels and initialize gallery","\t},","","\tresetsettings:function($, config, emptybelt){","\t\tstepcarousel.windowisresized = true","\t\tconfig.$gallery.unbind()","\t\tconfig.$belt.stop()","\t\tif (emptybelt){","\t\t\tconfig.$panels.remove()","\t\t}","\t\tconfig.$panels.unbind()","\t\tif (config.defaultbuttons.enable){","\t\t\tconfig.$leftnavbutton.remove()","\t\t\tconfig.$rightnavbutton.remove()","\t\t}","\t\tif (config.$paginatediv.length==1){","\t\t\tconfig.$paginatediv.unbind()","\t\t\tconfig.$paginatediv.empty()","\t\t\tconfig.$paginatediv.html(config.navbuttonhtml)","\t\t}","\t\tif (config.autostep)","\t\t\tconfig.autostep.status=null","\t\tif (config.panelbehavior.persist){","\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0) //set initial panel to 0, overridden w/ current panel if window.unload is invoked","\t\t}","\t},","","\tsetup:function(config){","\t\t//Disable Step Gallery scrollbars ASAP dynamically (enabled for sake of users with JS disabled)","\t\tdocument.write('<style type=\"text/css\">\\n#'+config.galleryid+'{overflow: hidden;}\\n</style>')","\t\tjQuery(document).ready(function($){","\t\t\tconfig.$gallery=$('#'+config.galleryid)","\t\t\tstepcarousel.init($, config)","\t\t}) //end document.ready","\t\tjQuery(window).bind('resize', function(){ // when window is resized, refresh carousel","\t\t\tclearTimeout(config.windowresizetimer)","\t\t\tconfig.windowresizetimer = setTimeout(function(){ // call resize function just once","\t\t\t\tstepcarousel.stopautostep(config)","\t\t\t\tstepcarousel.resetsettings(jQuery, config)","\t\t\t\tif (config.panelbehavior.persist)","\t\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", 0)","\t\t\t\tstepcarousel.init(jQuery, config, 'windowresize')","\t\t\t}, 200)","\t\t})","\t\tjQuery(window).bind('unload', function(){ //clean up on page unload","\t\t\tstepcarousel.resetsettings($, config, true)","\t\t\tif (config.panelbehavior.persist)","\t\t\t\tstepcarousel.setCookie(config.galleryid+\"persist\", config.currentpanel)","\t\t\tjQuery.each(config, function(ai, oi){","\t\t\t\toi=null","\t\t\t})","\t\t\tconfig=null","\t\t})","\t}","}","",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":6,"column":13},"end":{"row":6,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1442654784294,"hash":"b6656387d22ef27421c4a7aa315c7f3ddee57e44"}